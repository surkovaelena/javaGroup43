package les_21;

public class Main_Git {

    /**
     * Git - это система контроля версий
     * Требуется облачное хранение кода для доступа на различных устройствах из разных место, а также для хранения
     * версия, для сравнения кода, работа нескольких разработчиков в одном проекте.
     *
     * Для этих целей придуман git.
     *
     * Git - это система контроля версий. Контролируются изменения в одном или нескольких файлах, и предоставляет
     *  возможность вернуться на прежнюю версию файла. А также предоставляет возможность работать над одной
     * программой группе программистов, совмещая код, показывая разницы и историю разработки.
     * Есть разные сервисы:
     *      svn/subversion (бесплатный, свободная централизованная система управления версиями, официально
     *          выпущенная в 2004 году в США компанией CollabNet);
     *      git - локальный репозиторий:
     *      gitHub (условно-бесплатный, официально принадлежит корпорации Microsoft);
     *      gitLab (условно-бесплатный, основали выходцы из Украины Валерий Сизов и Дмитрий Запорожец в 2011 году,
     *          в 2013 году к ним присоединился Сид Сибранджи);
     *
     * Репозиторий - это место хранения кода, изначально локально и далее отправляться в облако (web-server).
     * У одного аккаунта git, может быть много репозиториев.
     *
     * Ы резюме всегда нужно указывать ссылку на свой git репозиторий или github или чаще gitlab, где работодатель
     * может изучить ваши проекты.
     *
     * Схема работы:
     *                                              Репозиторий
     *                          _________________________________________________
     *                          |      Код, например интернет-магазина          |
     *                 _______  |_______________________________________________|?------
     *         Update |     Push  ?         |        ?                  |              |
     *               1|          2|       1 |       2|                 1|            2 |
     *         _______?_______   |      ___?________|______       _____?______________|__
     *         |       commit|____|     |                 |        |                    |
     *         | Авторизация |          | Новая страница  |        | Отладка коннектора |
     *         |_____________|          |_________________|        |____________________|
     *           Компьютер 1               Компьютер 2              Компьютер 3
     *
     * 1. Update - (обновить) скачать из облака обновления (push коллег)
     * 2. Commit - (фиксировать) сохранить в локальный git
     * 3. Push - (затолкать) сохранить в облачный git
     */

       /** УСТАНОВКА GIT IDEA
        * 1. Нужно создать аккаунт на https://github.com/
        *    Можно гуглить чужие проекты, например java shop github и разбирать чужой код, можно скачать.
        *    Также в профиле видны активности по каммитам.
        *    Чтобы не показывать свой проект другим, нужно в Sitting сделать его Danger Zone приватным
        * 2. Установить github (https://github.com/git-guides/install-git) - скачать git.exe download github.
        *    У Linux/Unix есть свой хороший терминал, у windows PowerShell, но git оригинальный.
        * 3. Idea - File - Settings - Version Control - Git: указать пусть установки git (C:\Program Files\Git\cmd\git.exe) и нажать test
         * 4. Idea - File - Settings - Version Control - GitHub: Залогиниться
         * 5. Создать (проверить кодировку) и загрузить новый проект в репозиторий: menu VCS - Share Project on GitHub
         *    или menu Git - GitHub - Share Project on GitHub (делается только один раз для публикации на github)
         * 6. Перейти на сайт и посмотреть добавленный репозиторий
         * 7. Делаем изменения кода показать зеленные и серые полоски (изменение)
         * 8. История изменения (часы у стрелок)
         * 9. Публикуем изменения на github, так пока я работал, другие могли обновить код и что бы у меня был код
         *      актуальные, нужно всегда сначала обновиться (стрелка вниз). Затирание вашего код не будет.
         * 10.Затем сначала делают каммит (галка) для сохранения версии на своем компьютере локально, как сохранение
         *    файла, но еще не произойдет выкачка на сервер в общие репозиторий. Если функционал большой, то выгодна
         *    для себя делать несколько каммитов, чтобы в случае проблем можно было откатиться на один каммит назад а
         *    не начинать с нуля.
            * 11. Далее когда функционал полностью готов, можно выгрузить его в общий репозиторий (стрелка вверх)
         * 12. Из истории изменений можно откатится get на предыдущий каммит.
         * 13. Пару слов про ветки
         */
/**
 * ПОЛЕЗНЫЕ ССЫЛКИ
 * 1. Книга о GIT, в том числе на русском: https://git-scm.com/book/ru/v2
 * 2. Ссылка на терминал: https://git-scm.com/downloads
 * 3. Обучение git: https://learngitbranching.js.org/?locale=ru_RU
 */
//6789990
}
